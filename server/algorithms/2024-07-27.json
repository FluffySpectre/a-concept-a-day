{
  "name": "Rabin-Karp Algorithm",
  "content": [
    {
      "title": "Summary",
      "content": "A string searching algorithm that uses hashing to find any one of a set of pattern strings in a text. It's efficient for large patterns.",
      "type": "text"
    },
    {
      "title": "Use Case",
      "content": "A plagiarism checker that scans millions of documents on the internet for specific phrases or sentences, flagging potential copyright infringement.",
      "type": "text"
    },
    {
      "title": "Fun Fact",
      "content": "The Rabin-Karp algorithm can find any substring in O(n) time, not just a specific string, making it useful for tasks beyond string searching.",
      "type": "text"
    },
    {
      "title": "Steps",
      "content": "<ol><li>Choose a prime number 'p' and a value 'd'. Initialize the hash values for the pattern and the first window of the text.</li><li>For each character in the text, calculate the hash value for the current window by taking a linear combination of its characters using the chosen prime 'p' and 'd', and then compare it with the pattern's hash value.</li><li>If there's a match, check for exact matches by comparing characters. If not, slide the window to the right by one character.</li></ol>",
      "type": "text"
    },
    {
      "title": "Code Example",
      "content": "def rabin_karp(text, pattern):\n    \"\"\"\n    Rabin-Karp string searching algorithm.\n\n    Args:\n        text (str): The input text to search.\n        pattern (str): The substring to search for.\n\n    Returns:\n        int: The first occurrence of the pattern in the text, or -1 if not found.\n    \"\"\"\n\n    # Calculate the hash value of the pattern\n    d = 256  # Number of possible characters in ASCII\n    q = 101  # A prime number used as a modulus to ensure the hash is within a reasonable range\n    n = len(pattern)\n    m = len(text)\n\n    # Compute the hash of the pattern and the initial hash of the text\n    p_hash = 0\n    t_hash = 0\n\n    # Calculate the base value for the rolling hash (d^(n-1))\n    h = 1\n    for _ in range(n - 1):\n        h = (h * d) % q\n\n    # Compute initial hashes\n    for i in range(n):\n        p_hash = ((d * p_hash + ord(pattern[i])) % q)\n        t_hash = ((d * t_hash + ord(text[i])) % q)\n\n    # Compare hash values, and if they're equal then compare characters one-by-one\n    for s in range(m - n + 1):\n        if t_hash == p_hash:\n            match = True\n\n            # Compare actual characters to confirm the match\n            for i in range(n):\n                if text[s + i] != pattern[i]:\n                    match = False\n                    break\n\n            # If there's a match, return the index of the match in the text\n            if match:\n                return s\n\n        # Roll the hash value for the next comparison by removing the first character and adding the next one from the text\n        t_hash = (d * (t_hash - ord(text[s]) * h) + ord(text[s + n])) % q\n\n        if t_hash < 0:\n            t_hash += q\n\n    # If no match is found, return -1\n    return -1\n\n\n# Example usage\ntext = \"ABCCDDAEFGH\"\npattern = \"CD\"\n\nindex = rabin_karp(text, pattern)\nprint(\"Pattern found at index\", index) if index != -1 else print(\"Pattern not found\")",
      "type": "code"
    }
  ],
  "date": 1722124549.801242
}